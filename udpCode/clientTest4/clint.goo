/*直接调用这个方法Quat_report()就开始采集数据并发送UDP报文。
Stop_report()停止上报UDP报文
注意：sensor数据上报的串口写死：COM3,115200          */
package REPT_quat

import (
	"bytes"
	"encoding/binary"
	"flag"
	"log"
	"math"
	"net"
	"time"

	"github.com/tarm/serial"
	//	"irock.ren/Aircraft/xmotion"
)

type REPORT struct {
	Head        [4]byte    //“REPT”
	Status      [2]byte    //预留
	Size        uint16     // 帧长度不会超过 256
	TimeStamp   int64      // 时间戳,注意对齐;
	QuatSensor  [4]float32 //Quaternion
	EularSensor [4]float32 // Sensor板的 Yaw, Roll, Pitch,空
	QuatMotor   [4]float32 //预留,
	EularMotor  [4]float32 // 电机的 Yaw, Roll, Pitch,空
}

var Eular [9]byte

//初始化补偿
var (
	rX float32 = 0
	rY float32 = 0
	rZ float32 = 0
)

const PI = 3.1415926

var raddr = flag.String("raddr", "127.0.0.1:18889", "remote server address")
var outmsg REPORT
var enable bool = true

func init() {
	log.SetFlags(log.LstdFlags | log.Lshortfile)
	flag.Parse()
}

func Stop_report() {
	enable = false
}
func Quat_report() {

	// Resolving Address
	remoteAddr, err := net.ResolveUDPAddr("udp", *raddr)
	if err != nil {
		log.Fatalln("Error: ", err)
	}
	// Make a connection
	tmpAddr := &net.UDPAddr{
		IP:   net.ParseIP("127.0.0.1"),
		Port: 0,
	}

	conn, err := net.DialUDP("udp", tmpAddr, remoteAddr)
	// Exit if some error occured
	if err != nil {
		log.Fatalln("Error: ", err)
	}
	endian := binary.BigEndian
	defer conn.Close()
	////////////////////////////////////////////////////
	//打开串口
	c := &serial.Config{Name: "COM3", Baud: 115200}
	s, err := serial.OpenPort(c)
	if err != nil {
		log.Fatal("串口打开失败，检查是不是COM3:115200", err)
	}

	n, err := s.Write([]byte("test"))
	if err != nil {
		log.Fatal(err)
	}

	buf := make([]byte, 200)

	Quat := make([]float32, 4)
	log.Println("开始采集并传输数据")
	for {
	HEAR:
		timer1 := time.NewTimer(time.Millisecond * 3)
		///////////////////////////////////////////////
		//time.Sleep(time.Millisecond * 4)
		n, err = s.Read(buf)
		var ok bool = false
		var i int16 = 0

		//log.Printf("%#v\n", buf[:n])
		for !ok {
			ok = ((buf[i] == 0x55) && (buf[i+1] == 0x53)) || i >= 18
			i++
		}
		if int16(n)-i < 11 {
			<-timer1.C
			goto HEAR
		}
		//log.Printf("%#v\n", buf[i:n])
		switch buf[i] {
		case 0x53:
			if buf[i-1] == 0x55 {
				i++
				Eular[0], Eular[1], Eular[2], Eular[3], Eular[4], Eular[5], Eular[6], Eular[7], Eular[8] =
					buf[i], buf[i+1], buf[i+2], buf[i+3], buf[i+4], buf[i+5], buf[i+6], buf[i+7], buf[i+8]
				outmsg.EularSensor[2] = (float32(int16(Eular[1])<<8|int16(Eular[0]))*180.0/32768.0 + 90) + rZ
				outmsg.EularSensor[0] = -float32(int16(Eular[3])<<8|int16(Eular[2]))*180.0/32768.0 + rX
				outmsg.EularSensor[1] = (float32(int16(Eular[5])<<8|int16(Eular[4]))*180.0/32768.0 + 180) + rY
				log.Println(outmsg.EularSensor)
			}
		}
		///////////////////////////////////////////////

		Quat[0] = float32(math.Cos(float64(outmsg.EularSensor[0]*PI/360.0))*math.Cos(float64(outmsg.EularSensor[1]*PI/360.0))*math.Cos(float64(outmsg.EularSensor[2]*PI/360.0)) + math.Sin(float64(outmsg.EularSensor[0]*PI/360.0))*math.Sin(float64(outmsg.EularSensor[1]*PI/360.0))*math.Sin(float64(outmsg.EularSensor[2])*PI/360.0))
		Quat[1] = float32(math.Sin(float64(outmsg.EularSensor[0]*PI/360.0))*math.Cos(float64(outmsg.EularSensor[1]*PI/360.0))*math.Cos(float64(outmsg.EularSensor[2]*PI/360.0)) - math.Cos(float64(outmsg.EularSensor[0]*PI/360.0))*math.Sin(float64(outmsg.EularSensor[1]*PI/360.0))*math.Sin(float64(outmsg.EularSensor[2])*PI/360.0))
		Quat[2] = float32(math.Cos(float64(outmsg.EularSensor[0]*PI/360.0))*math.Sin(float64(outmsg.EularSensor[1]*PI/360.0))*math.Cos(float64(outmsg.EularSensor[2]*PI/360.0)) + math.Sin(float64(outmsg.EularSensor[0]*PI/360.0))*math.Cos(float64(outmsg.EularSensor[1]*PI/360.0))*math.Sin(float64(outmsg.EularSensor[2])*PI/360.0))
		Quat[3] = float32(math.Cos(float64(outmsg.EularSensor[0]*PI/360.0))*math.Cos(float64(outmsg.EularSensor[1]*PI/360.0))*math.Sin(float64(outmsg.EularSensor[2]*PI/360.0)) - math.Sin(float64(outmsg.EularSensor[0]*PI/360.0))*math.Sin(float64(outmsg.EularSensor[1]*PI/360.0))*math.Cos(float64(outmsg.EularSensor[2])*PI/360.0))

		outmsg.QuatSensor[0] = Quat[0]
		outmsg.QuatSensor[1] = Quat[1]
		outmsg.QuatSensor[2] = Quat[2]
		outmsg.QuatSensor[3] = Quat[3]

		outmsg.TimeStamp = int64(int(time.Now().Weekday())*24*3600+
			time.Now().Hour()*3600+time.Now().Minute()*60+
			time.Now().Second()*1000) + int64(time.Now().Nanosecond()/1000000)
		outbuf := make([]byte, binary.Size(outmsg), binary.Size(outmsg))
		buf0 := new(bytes.Buffer)
		buf1 := new(bytes.Buffer)
		buf2 := new(bytes.Buffer)
		buf3 := new(bytes.Buffer)
		buf4 := new(bytes.Buffer)
		buf5 := new(bytes.Buffer)
		buf6 := new(bytes.Buffer)
		buf7 := new(bytes.Buffer)
		buf8 := new(bytes.Buffer)
		buf9 := new(bytes.Buffer)
		buf10 := new(bytes.Buffer)
		buf11 := new(bytes.Buffer)
		buf12 := new(bytes.Buffer)
		buf13 := new(bytes.Buffer)
		buf14 := new(bytes.Buffer)
		buf15 := new(bytes.Buffer)
		buf16 := new(bytes.Buffer)
		//头部
		outbuf[0] = byte('R')
		outbuf[1] = byte('E')
		outbuf[2] = byte('P')
		outbuf[3] = byte('T')
		//预留
		outbuf[4] = 0
		outbuf[5] = 0
		//贞长
		outmsg.Size = 80

		binary.Write(buf0, endian, outmsg.Size) //
		copy(outbuf[6:], buf0.Bytes())
		//四元素
		binary.Write(buf1, endian, outmsg.QuatSensor[0]) //
		copy(outbuf[16:], buf1.Bytes())
		binary.Write(buf2, endian, outmsg.QuatSensor[1]) //
		copy(outbuf[20:], buf2.Bytes())
		binary.Write(buf3, endian, outmsg.QuatSensor[2]) //
		copy(outbuf[24:], buf3.Bytes())
		binary.Write(buf4, endian, outmsg.QuatSensor[3]) //
		copy(outbuf[28:], buf4.Bytes())

		binary.Write(buf5, endian, outmsg.EularSensor[0]) //
		copy(outbuf[32:], buf5.Bytes())
		binary.Write(buf6, endian, outmsg.EularSensor[1]) //
		copy(outbuf[36:], buf6.Bytes())
		binary.Write(buf7, endian, outmsg.EularSensor[2]) //
		copy(outbuf[40:], buf7.Bytes())
		binary.Write(buf8, endian, outmsg.EularSensor[3]) //
		copy(outbuf[44:], buf8.Bytes())

		binary.Write(buf9, endian, outmsg.QuatMotor[0]) //
		copy(outbuf[48:], buf9.Bytes())
		binary.Write(buf10, endian, outmsg.QuatMotor[1]) //
		copy(outbuf[52:], buf10.Bytes())
		binary.Write(buf11, endian, outmsg.QuatMotor[2]) //
		copy(outbuf[56:], buf11.Bytes())
		binary.Write(buf12, endian, outmsg.QuatMotor[3]) //
		copy(outbuf[60:], buf12.Bytes())

		binary.Write(buf13, endian, outmsg.EularMotor[0]) //
		copy(outbuf[64:], buf13.Bytes())
		binary.Write(buf14, endian, outmsg.EularMotor[1]) //
		copy(outbuf[68:], buf14.Bytes())
		binary.Write(buf15, endian, outmsg.EularMotor[2]) //
		copy(outbuf[72:], buf15.Bytes())
		binary.Write(buf16, endian, outmsg.EularMotor[3]) //
		copy(outbuf[76:], buf16.Bytes())

		// write a message to server
		/*, "\n", outmsg)*/
		_, err = conn.Write([]byte(outbuf)) //_, err = listener.WriteToUDP([]byte("world"), remoteAddr)
		if err != nil {
			log.Println(err)
		}
		if enable == false {

			<-timer1.C
			break
		}

		<-timer1.C
	}
	return
}

//初始化数据的方法
func DataInitial() {
	rX = (360 - -float32(int16(Eular[3])<<8|int16(Eular[2]))*180.0/32768.0)
	if rX > 360 {
		rX = rX - 360
	}
	if rX < 0 {
		rX = rX + 360
	}
	rY = (360 - (float32(int16(Eular[5])<<8|int16(Eular[4]))*180.0/32768.0 + 180)) + 30
	if rY > 360 {
		rY = rY - 360
	}
	if rY < 0 {
		rX = rY + 360
	}
	rZ = (360 - (float32(int16(Eular[1])<<8|int16(Eular[0]))*180.0/32768.0 + 90)) + 180
	if rZ > 360 {
		rZ = rZ - 360
	}
	if rZ < 0 {
		rX = rZ + 360
	}
	log.Println(time.Now())
	log.Println(outmsg)
}

//座椅的欧拉角。
//RX=座椅+电动缸+补偿

// 座椅=圈数/传动比
// 电动缸=圈数->高度->角度

//RY=大臂+补偿
//RZ=大转盘+补偿
//再将欧拉角转化为电机四元素。
/*NX大转盘、Ny大臂、Nz座椅、Nw电动缸
由于NX,NY,NZ实际返回来的是50ms一次，
而要求刷新的是。用速度不变原则推断当前位置*/
var Nx, Ny, Nz, Nw [500]float64
var state bool = false

/*向oclus发送电机位置产生四元素UDP:   首先通过go UDPEularMotor()向游戏中发送四元素数据
再在刷新下发位置的循环中调用FeedBackfilter(r0, r1, r2, r3)每次循环都会调用这个函数以刷新位置数据*/
func FeedBackfilter(r0, r1, r2, r3 float64) {
	state = true
	step0 := (r0 - Nx[0]) / 5
	step1 := (r1 - Ny[0]) / 5
	step2 := (r2 - Nz[0]) / 5
	step3 := (r3 - Nw[0]) / 5
	for i := 0; i < 50; i++ {
		Nx[i] = r0 + float64(i)*step0
		Ny[i] = r1 + float64(i)*step1
		Nz[i] = r2 + float64(i)*step2
		Nw[i] = r3 + float64(i)*step3
	}
}
func UDPEularMotor() {

	remoteAddr, err := net.ResolveUDPAddr("udp", *raddr)
	if err != nil {
		log.Fatalln("Error: ", err)
	}
	tmpAddr := &net.UDPAddr{
		IP:   net.ParseIP("127.0.0.1"),
		Port: 0,
	}
	conn, err := net.DialUDP("udp", tmpAddr, remoteAddr)
	if err != nil {
		log.Fatalln("Error: ", err)
	}
	endian := binary.BigEndian
	defer conn.Close()
	for {
		state = false
		for i := 0; i < 10; i++ {
			timer := time.NewTimer(time.Millisecond * 10)
			Rchai := Nz[i] / 50 * 360 //°

			RH := math.Acos((72*72+72*72-(Nw[i]/5.17)*(Nw[i]/5.17))/(2*72*72)) / PI * 360 //
			outmsg.EularMotor[2] = float32(Rchai+RH) + 180                                //+补偿
			for outmsg.EularMotor[2] > 360 {
				outmsg.EularMotor[2] = outmsg.EularMotor[2] - 360
			}
			for outmsg.EularMotor[2] < 0 {
				outmsg.EularMotor[2] = outmsg.EularMotor[2] + 360
			}

			outmsg.EularMotor[0] = float32(Ny[i] / 60 * 360) //+补偿
			for outmsg.EularMotor[0] > 360 {
				outmsg.EularMotor[0] = outmsg.EularMotor[0] - 360
			}
			for outmsg.EularMotor[0] < 0 {
				outmsg.EularMotor[0] = outmsg.EularMotor[0] + 360
			}

			outmsg.EularMotor[1] = float32(Nx[i]/100*360) + 30 //+补偿
			for outmsg.EularMotor[1] > 360 {
				outmsg.EularMotor[1] = outmsg.EularMotor[1] - 360
			}
			for outmsg.EularMotor[1] < 0 {
				outmsg.EularMotor[1] = outmsg.EularMotor[1] + 360
			}
			Quat := make([]float32, 4)
			Quat[0] = float32(math.Cos(float64(outmsg.EularMotor[0]*PI/360.0))*math.Cos(float64(outmsg.EularMotor[1]*PI/360.0))*math.Cos(float64(outmsg.EularMotor[2]*PI/360.0)) + math.Sin(float64(outmsg.EularMotor[0]*PI/360.0))*math.Sin(float64(outmsg.EularMotor[1]*PI/360.0))*math.Sin(float64(outmsg.EularMotor[2])*PI/360.0))
			Quat[1] = float32(math.Sin(float64(outmsg.EularMotor[0]*PI/360.0))*math.Cos(float64(outmsg.EularMotor[1]*PI/360.0))*math.Cos(float64(outmsg.EularMotor[2]*PI/360.0)) - math.Cos(float64(outmsg.EularMotor[0]*PI/360.0))*math.Sin(float64(outmsg.EularMotor[1]*PI/360.0))*math.Sin(float64(outmsg.EularMotor[2])*PI/360.0))
			Quat[2] = float32(math.Cos(float64(outmsg.EularMotor[0]*PI/360.0))*math.Sin(float64(outmsg.EularMotor[1]*PI/360.0))*math.Cos(float64(outmsg.EularMotor[2]*PI/360.0)) + math.Sin(float64(outmsg.EularMotor[0]*PI/360.0))*math.Cos(float64(outmsg.EularMotor[1]*PI/360.0))*math.Sin(float64(outmsg.EularMotor[2])*PI/360.0))
			Quat[3] = float32(math.Cos(float64(outmsg.EularMotor[0]*PI/360.0))*math.Cos(float64(outmsg.EularMotor[1]*PI/360.0))*math.Sin(float64(outmsg.EularMotor[2]*PI/360.0)) - math.Sin(float64(outmsg.EularMotor[0]*PI/360.0))*math.Sin(float64(outmsg.EularMotor[1]*PI/360.0))*math.Cos(float64(outmsg.EularMotor[2])*PI/360.0))
			outmsg.QuatMotor[0] = Quat[0]
			outmsg.QuatMotor[1] = Quat[1]
			outmsg.QuatMotor[2] = Quat[2]
			outmsg.QuatMotor[3] = Quat[3]
			log.Println(i, outmsg.EularMotor, outmsg.QuatMotor)
			outmsg.TimeStamp = int64(int(time.Now().Weekday())*24*3600+
				time.Now().Hour()*3600+time.Now().Minute()*60+
				time.Now().Second()*1000) + int64(time.Now().Nanosecond()/1000000)
			outbuf := make([]byte, binary.Size(outmsg), binary.Size(outmsg))
			buf0 := new(bytes.Buffer)
			buf1 := new(bytes.Buffer)
			buf2 := new(bytes.Buffer)
			buf3 := new(bytes.Buffer)
			buf4 := new(bytes.Buffer)
			buf5 := new(bytes.Buffer)
			buf6 := new(bytes.Buffer)
			buf7 := new(bytes.Buffer)
			buf8 := new(bytes.Buffer)
			buf9 := new(bytes.Buffer)
			buf10 := new(bytes.Buffer)
			buf11 := new(bytes.Buffer)
			buf12 := new(bytes.Buffer)
			buf13 := new(bytes.Buffer)
			buf14 := new(bytes.Buffer)
			buf15 := new(bytes.Buffer)
			buf16 := new(bytes.Buffer)
			//头部
			outbuf[0] = byte('R')
			outbuf[1] = byte('E')
			outbuf[2] = byte('P')
			outbuf[3] = byte('T')
			//预留
			outbuf[4] = 0
			outbuf[5] = 1
			//贞长
			outmsg.Size = 80

			binary.Write(buf0, endian, outmsg.Size) //
			copy(outbuf[6:], buf0.Bytes())
			//四元素
			binary.Write(buf1, endian, outmsg.QuatSensor[0]) //
			copy(outbuf[16:], buf1.Bytes())
			binary.Write(buf2, endian, outmsg.QuatSensor[1]) //
			copy(outbuf[20:], buf2.Bytes())
			binary.Write(buf3, endian, outmsg.QuatSensor[2]) //
			copy(outbuf[24:], buf3.Bytes())
			binary.Write(buf4, endian, outmsg.QuatSensor[3]) //
			copy(outbuf[28:], buf4.Bytes())

			binary.Write(buf5, endian, outmsg.EularSensor[0]) //
			copy(outbuf[32:], buf5.Bytes())
			binary.Write(buf6, endian, outmsg.EularSensor[1]) //
			copy(outbuf[36:], buf6.Bytes())
			binary.Write(buf7, endian, outmsg.EularSensor[2]) //
			copy(outbuf[40:], buf7.Bytes())
			binary.Write(buf8, endian, outmsg.EularSensor[3]) //
			copy(outbuf[44:], buf8.Bytes())

			binary.Write(buf9, endian, outmsg.QuatMotor[0]) //
			copy(outbuf[48:], buf9.Bytes())
			binary.Write(buf10, endian, outmsg.QuatMotor[1]) //
			copy(outbuf[52:], buf10.Bytes())
			binary.Write(buf11, endian, outmsg.QuatMotor[2]) //
			copy(outbuf[56:], buf11.Bytes())
			binary.Write(buf12, endian, outmsg.QuatMotor[3]) //
			copy(outbuf[60:], buf12.Bytes())

			binary.Write(buf13, endian, outmsg.EularMotor[0]) //
			copy(outbuf[64:], buf13.Bytes())
			binary.Write(buf14, endian, outmsg.EularMotor[1]) //
			copy(outbuf[68:], buf14.Bytes())
			binary.Write(buf15, endian, outmsg.EularMotor[2]) //
			copy(outbuf[72:], buf15.Bytes())
			binary.Write(buf16, endian, outmsg.EularMotor[3]) //
			copy(outbuf[76:], buf16.Bytes())

			// write a message to server
			_, err = conn.Write([]byte(outbuf)) //_, err = listener.WriteToUDP([]byte("world"), remoteAddr)
			if err != nil {
				log.Println(err)
			}
			if state == true {
				<-timer.C
				break
			}
			<-timer.C
		}
	}
}
func TEST() {

	go UDPEularMotor()
	var R0, R1, R2, R3 float64
	var dat bool
	for {

		timer := time.NewTimer(time.Millisecond * 1000)
		R0 = R0 + 2
		//R1 = R1 + 0.1
		//R2 = R2 + 0.1
		R1 = 90
		if dat == true {
			R3 = R3 + 0.3
			if R3 > 220 {

				dat = false
			}
		}
		if dat == false {
			R3 = R3 - 0.3
			if R3 < 0 {

				dat = true
			}
		}

		FeedBackfilter(R0, R1, R2, R3)
		<-timer.C

	}
}
